#!/usr/bin/python

import xlrd, sys, os, getopt, hashlib
import config

name_row_index = 1
type_row_index = 0
data_row_index = 3

idl_type = ( "double", "i32", "i64", "i32", "i64", "string" )
ext_type = ( "ExcelBase.tv", "ExcelBase.tpv" )

idl_out_dir = "./idl_output/"

def create_idl(tname, names, types):

    code = "namespace csharp {0}\n".format(config.namespace)
    code += "namespace python {0}\n\n".format(config.namespace)
    code += "struct {0} {{\n".format(tname)
    has_ext_type = False
    for i in range(len(names)):
        if len(names[i])==0 and len(types[i])==0:
            break
        print tname ,"Colx", i+1,"/",len(names), names[i], types[i]
        if types[i] == "int":
            types[i] = "i32"        
        elif types[i] == "ints":
            types[i] = "i32s"
            
        elif types[i] == "float":
            types[i] = "double"
        elif types[i] == "floats":
            types[i] = "doubles"
            
        elif types[i] == "bool":
            types[i] = "i32"
            
        elif types[i] == "tv":
            types[i] = "ExcelBase.tv"
        elif types[i] == "tvs":
            types[i] = "ExcelBase.tvs"
            
        elif types[i] == "tpv":
            types[i] = "ExcelBase.tpv"
        elif types[i] == "tpvs":
            types[i] = "ExcelBase.tpvs"
            
        elif types[i] == "comment":
            print "\tSkip Comment Colx", i+1
            continue

        if types[i] in idl_type:
            code += "\t{0}: {1} {2}\n".format(i+2, types[i], names[i])
        elif types[i][-1:] == "s" and types[i][:-1] in idl_type:
            code += "\t{0}: list<{1}> {2}\n".format(i+2, types[i][:-1], names[i])
        elif types[i] in ext_type:
            code += "\t{0}: {1} {2}\n".format(i+2, types[i], names[i], i+2)
            has_ext_type = True
        elif types[i][-1:] == "s" and types[i][:-1] in ext_type:
            code += "\t{0}: list<{1}> {2}\n".format(i+2, types[i][:-1], names[i])
            has_ext_type = True
        else:
            print "%s Colx %d Has Error Type : %s:%s !!" % (tname, i+1, names[i], types[i])
            return None
    code += "}\n"

    proto_file = "{0}{1}.thrift".format(idl_out_dir, tname)
    fp = file(proto_file, "wb")
    fp.write("// Auto Generated by script.\n")
    fp.write("// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING.\n\n")
    
    if has_ext_type :
        fp.write("include \"common/ExcelBase.thrift\"\n\n")
    fp.write(code)
    fp.close()

    return proto_file


def handle_excel_data(data):
    tname = data.sheet_names()[0]
    sheet = data.sheet_by_name(tname)
    if sheet.nrows < data_row_index:
        print "Error! 2'nd and 3'rd Rows Error!"
        return False
    if sheet.ncols < 1:
        print "Error! cols Error!"
        return False

    name_row = sheet.row_values(name_row_index)
    type_row = sheet.row_values(type_row_index)
    proto = create_idl(tname, name_row, type_row)
    if proto == None:
        print "Create Proto Failed !!"
        return False
    """
    data_file = mk_data_file(proto, sheet)
    if data_file == None:
        print "Create Data Fialed !!"
        return False
    print "Create %s, %s Success ." % (proto, data_file)
    """
    return True

def main():
    reload(sys)
    sys.setdefaultencoding("utf-8")

    base_dir = "excel"
    for subdir in os.listdir(base_dir):
        if subdir == ".svn":
            continue
        excelfile = os.path.join(base_dir, subdir)
        if not os.path.isfile(excelfile):
            continue
            
        fpath, fname = os.path.split(excelfile)
        fname, ext = os.path.splitext(fname)

        if ext != ".xls" and ext != ".xlsx":
            continue

        print "Parse %s ......" % excelfile
        data = xlrd.open_workbook(excelfile)
        if handle_excel_data(data):
            continue
        else:
            print "%s Contain Error !!!" % excelfile
    print "Done ......"

if __name__ == "__main__":
    main()
